def apply(script: Script) = script.op match {
  case `/dev/fd`(op0@_) => ???
  case `/dev/null`=>  ???
  case `/dev/random`=>  ???
  case `/dev/stderr`=>  ???
  case `/dev/stdin`=>  ???
  case `/dev/stdout`=>  ???
  case `/dev/tcp`(op0@_, op1@_) => ???
  case `/dev/udp`(op0@_, op1@_) => ???
  case Amper() =>  ???
  case And() =>  ???
  case AnsiCQuoted(op0@_) => ???
  case AppendStdOut() =>  ???
  case AppendStdOutWithSdErr() =>  ???
  case ArithmeticExpression(op0@_) => ???
  case ArrayVariable(op0@_) => ???
  case BashCliArgVariable(op0@_, op1@_) => ???
  case BashCliFlagArgVariable(op0@_, op1@_, op2@_) => ???
  case BashCliOptArgVariable(op0@_, op1@_, op2@_) => ???
  case BashCliVecArgVariable(op0@_, op1@_, op2@_) => ???
  case BashVariable(op0@_, op1@_, op2@_, op3@_) => ???
  case BreakLine() =>  ???
  case CDo(op0@_) => ???
  case CDone() =>  ???
  case CElif(op0@_) => ???
  case CElse(op0@_) => ???
  case CFi() =>  ???
  case CFileDescriptorIsOpenAndReferTerminal(op0@_, op1@_) => ???
  case CFor(op0@_) => ???
  case CGroupIdBitSet(op0@_, op1@_) => ???
  case CIf(op0@_, op1@_) => ???
  case CIfIsFile(op0@_, op1@_) => ???
  case CIn(op0@_) => ???
  case CIsBlock(op0@_, op1@_) => ???
  case CIsCharacter(op0@_, op1@_) => ???
  case CIsDirectory(op0@_, op1@_) => ???
  case CIsExecutable(op0@_, op1@_) => ???
  case CIsFile(op0@_, op1@_) => ???
  case CIsGreaterThanZero(op0@_, op1@_) => ???
  case CIsModifiedSinceLastRead(op0@_, op1@_) => ???
  case CIsNamedPipe(op0@_, op1@_) => ???
  case CIsOwnedByEffectiveGroupId(op0@_, op1@_) => ???
  case CIsOwnedByEffectiveUserId(op0@_, op1@_) => ???
  case CIsReadAble(op0@_, op1@_) => ???
  case CIsSocket(op0@_, op1@_) => ???
  case CIsSymbolLink(op0@_, op1@_) => ???
  case CIsSymbolicLink(op0@_, op1@_) => ???
  case CIsWritable(op0@_, op1@_) => ???
  case CStickyBitSet(op0@_, op1@_) => ???
  case CThen(op0@_) => ???
  case CUntil(op0@_, op1@_) => ???
  case CUserIdBitSet(op0@_, op1@_) => ???
  case CWhile(op0@_, op1@_) => ???
  case CloseDoubleSquareBracket() =>  ???
  case CloseGroupInContext() =>  ???
  case CloseStdIn() =>  ???
  case CloseStdOut() =>  ???
  case CloseSubShellEnv() =>  ???
  case CloseSubShellExp() =>  ???
  case CmdArgCtx(op0@_, op1@_) => ???
  case CmdArgs(op0@_) => ???
  case CommandListBuilder(op0@_) => ???
  case CommentLine(op0@_, op1@_) => ???
  case ConditionalBuilder(op0@_) => ???
  case DebugValue(op0@_) => ???
  case Dollar() =>  ???
  case EmptyArg() =>  ???
  case FileDescriptor(op0@_) => ???
  case FileName(op0@_, op1@_) => ???
  case FilePath(op0@_, op1@_, op2@_) => ???
  case FolderPath(op0@_, op1@_) => ???
  case HereDoc(op0@_, op1@_, op2@_) => ???
  case HereString(op0@_, op1@_) => ???
  case IntVariable(op0@_) => ???
  case LocalizationString(op0@_) => ???
  case Negate() =>  ???
  case NewLine() =>  ???
  case NoOp() =>  ???
  case OpenDoubleSquareBracket() =>  ???
  case OpenGroupInContext() =>  ???
  case OpenSubShellEnv() =>  ???
  case OpenSubShellExp() =>  ???
  case Or() =>  ???
  case ParameterExpander(op0@_) => ???
  case ParameterExpanderVariable(op0@_) => ???
  case PipeWithError() =>  ???
  case PipeWithStdOut() =>  ???
  case PipelineBuilder(op0@_) => ???
  case RedirectStdOutWithStdErr() =>  ???
  case RelFolderPath(op0@_) => ???
  case RelPath(op0@_, op1@_) => ???
  case ScriptLine() =>  ???
  case Semi() =>  ???
  case SheBang(op0@_) => ???
  case SimpleCommand(op0@_, op1@_, op2@_, op3@_) => ???
  case StdErr() =>  ???
  case StdIn() =>  ???
  case StdOut() =>  ???
  case StdOutWithStdErr() =>  ???
  case SubShellVariable(op0@_) => ???
  case TextVariable(op0@_) => ???
  case UnsetArrayVariable() =>  ???
  case UnsetVariable() =>  ???
}
